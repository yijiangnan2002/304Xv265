/*!
\copyright  Copyright (c) 2019 - 2021 Qualcomm Technologies International, Ltd.\n
            All Rights Reserved.\n
            Qualcomm Technologies International, Ltd. Confidential and Proprietary.
\file
\brief	    Defines the device properties to be used by the Device Database API.

            TODO: This file will probably be an autogenerated file, as it may need to compile
            device properties from the Application, Serivces and Domains. There will
            need to be a build time system for handling this requirement.

            In the interim, a static file is to be used for the device properties enum.
*/

#ifndef DEVICE_PROPERTIES_H_
#define DEVICE_PROPERTIES_H_

#include <bdaddr.h>
#include <csrtypes.h>
#include <device.h>
#include <audio_sources_list.h>
#include <voice_sources_list.h>
#include <volume_types.h>


/*! \brief device properties

    \note Alignment of this enum must be maintained when DFU is applied.
          Do not remove or replace properties in this enum. Deprecated
          properties may be renamed.

    \note The device_property_reserved_1 and device_property_reserved_2 entries exist for backward compatibility and
        should not normally be used. The device_property_supported_profiles and device_property_last_connected_profiles
        entries should be used instead. The replacements have been added on going from uint8 to uin16 profile values,
        and had to be added to the end. This allows for upgrade from the old versions to the new on a DFU.

 */
typedef enum
{
    device_property_bdaddr = 0,
    device_property_audio_volume,
    device_property_hfp_profile,
    device_property_type,
    device_property_link_mode,
    device_property_reserved_1,
    device_property_reserved_2,
    device_property_connected_profiles,
    device_property_reserved,
    device_property_flags,
    device_property_sco_fwd_features,
    device_property_mru,
    device_property_battery_server_config_l,
    device_property_battery_server_config_r,
    device_property_gatt_server_config,
    device_property_gatt_server_services_changed,
    device_property_profiles_connect_order,
    device_property_profiles_disconnect_order,
    device_property_profile_request_index,
    device_property_fast_pair_account_key_index,
    device_property_fast_pair_account_keys,
    device_property_fast_pair_personalized_name,
    device_property_voice_assistant,
    device_property_device_test_service,
    device_property_supported_profiles,
    device_property_last_connected_profiles,
    device_property_av_instance,
    device_property_audio_source,
    device_property_le_audio_broadcast_config,
    device_property_le_audio_unicast_config,
    device_property_le_audio_volume_config,
    device_property_le_audio_pacs_config,
    device_property_le_audio_csip_config,
    device_property_excludelist,
    device_property_hfp_instance,
    device_property_voice_source,
    device_property_voice_volume,
    device_property_hfp_mic_gain,
    device_property_va_flags,
    device_property_va_locale,
    device_property_pskeys,
    device_property_headset_service_config,
    device_property_analog_audio_volume,
    device_property_first_connect_after_dfu,
    device_property_aghfp_instance,
    device_property_max_num

} earbud_device_property_t;

bdaddr DeviceProperties_GetBdAddr(device_t device);

void DeviceProperties_SetBdAddr(device_t device, bdaddr *bd_addr);

void DeviceProperties_SanitiseBdAddr(bdaddr *bd_addr);

/*! \brief Get the audio source for a device.
    \param device The requested device.
    \return The audio source, or audio_source_none, if a source was not set for
    the device.
*/
audio_source_t DeviceProperties_GetAudioSource(device_t device);

/*! \brief Get the voice source for a device.
    \param device The requested device.
    \return The voice source, or voice_source_none, if a source was not set for
    the device.
*/
voice_source_t DeviceProperties_GetVoiceSource(device_t device);

/*! \brief Set the audio source for a device.
    \param device The device.
    \param source The audio source.
*/
void DeviceProperties_SetAudioSource(device_t device, audio_source_t source);

/*! \brief Set the voice source for a device.
    \param device The device.
    \param source The voice source.
*/
void DeviceProperties_SetVoiceSource(device_t device, voice_source_t source);

/*! \brief Remove the audio source property for a device.
    \param device The device.
*/
void DeviceProperties_RemoveAudioSource(device_t device);

/*! \brief Remove the voice source property for a device.
    \param device The device.
*/
void DeviceProperties_RemoveVoiceSource(device_t device);

/*! \brief Set the audio volume for a device.

    The input volume_t will be converted to the range used for the audio
    volume property before it is set.

    \param[in] device The device.
    \param[in] volume The audio volume.

    \return TRUE if the property was set; FALSE otherwise.
*/
bool DeviceProperties_SetAudioVolume(device_t device, volume_t volume);

/*! \brief Get the audio volume for a device.

    The given config is used to convert from the raw volume value stored in the
    device audio property to the volume returned from this function.

    If the audio property does not exist for the given device_t the output
    volume will not be modified and the function will return FALSE.

    \param[in] device The device.
    \param[in] config The volume config to use when converting the stored
                      volume to the output volume.
    \param[out] volume The volume read from the device property and
                       converted to the given volume config range.

    \return TRUE if the audio volume property exists and can be read,
            FALSE otherwise.
*/
bool DeviceProperties_GetAudioVolume(device_t device, volume_config_t config, volume_t *volume);

/*! \brief Set the voice volume for a device.

    The input volume_t will be converted to the range used for the voice
    volume property before it is set.

    \param[in] device The device.
    \param[in] volume The voice volume.

    \return TRUE if the property was set; FALSE otherwise.
*/
bool DeviceProperties_SetVoiceVolume(device_t device, volume_t volume);

/*! \brief Get the voice volume for a device.

    The given config is used to convert from the raw volume value stored in the
    device voice property to the volume returned from this function.

    If the voice property does not exist for the given device_t the input
    volume will not be modified and the function will return FALSE.

    \param[in] device The device.
    \param[in] config The volume config to use when converting the stored
                      volume to the output volume.
    \param[out] volume The volume read from the device property and
                       converted to the given volume config range.

    \return TRUE if the voice volume property exists and can be read,
            FALSE otherwise.
*/
bool DeviceProperties_GetVoiceVolume(device_t device, volume_config_t config, volume_t *volume);


#endif /* DEVICE_PROPERTIES_H_ */
